apply plugin: "com.android.application"

import com.android.build.OutputFile

apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Condition for including google services for firebase
 */
def googleServicesEnabled = hasGoogleServicesSupport()

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.mendix.nativetemplate"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        missingDimensionStrategy "react-native-camera", "general"
        versionCode 1
        versionName "1.0"
        testBuildType System.getProperty("testBuildType", "debug")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "boolean", "USE_FIREBASE", "${googleServicesEnabled}"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    flavorDimensions "mode"
    productFlavors {
        appstore {
            dimension "mode"
        }
        dev {
            dimension "mode"
            applicationIdSuffix ".developerapp"
            versionNameSuffix "-developerApp"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        tasks.create(name: "bundle${variant.name.capitalize()}JsAndAssets") {}

        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    dataBinding {
        enabled false
    }
    packagingOptions {
        pickFirst '**/libjsc.so'
        pickFirst '**/libc++_shared.so'
    }
}

project.ext.vectoricons = [
    // Intentionally left blank
    iconFontNames: []
]

dependencies {
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-code-push')
    implementation project(":mendixnative-release")
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "org.webkit:android-jsc:r245459"
    devImplementation "androidx.constraintlayout:constraintlayout:2.0.0-beta2"
    devImplementation "me.dm7.barcodescanner:zxing:1.9.13"

    // Required for Custom Dev Apps
    devImplementation 'com.fasterxml.jackson.core:jackson-core:2.10.3'
    devImplementation 'com.fasterxml.jackson.core:jackson-annotations:2.10.3'
    devImplementation 'com.fasterxml.jackson.core:jackson-databind:2.10.3'

    androidTestImplementation("com.wix:detox:+")
}

configurations.all {
    resolutionStrategy {
        force "androidx.annotation:annotation:1.1.0"
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into "libs"
}

apply from: file("../mendixnative-release/mendix.gradle"); applyMendixGradle(project)
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

// Disable till dependencies are ironed out
try {
    com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
} catch (e) {
}

boolean hasGoogleServicesSupport() {
    def enabled = file("$projectDir/google-services.json").exists()
    println "Google Services support is ${enabled ? "enabled" : "disabled"}"
    return enabled
}
